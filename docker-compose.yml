version: '3'
services:
  kafka:
    container_name: kafka
    hostname: kafka
    image: apache/kafka:3.7.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    volumes:
      - kafka-data:/var/lib/kafka
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: codeflix
      MYSQL_USER: codeflix
      MYSQL_PASSWORD: codeflix
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
  fastapi:
    build: .
    ports:
      - "8000:8000"
    command: ["fastapi", "dev", "src/api/fastapi/main.py", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    volumes:
      - .:/app
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
#  connect:
#    image: quay.io/debezium/connect:2.5
#    ports:
#      - "8083:8083"
#    environment:
#      BOOTSTRAP_SERVERS: kafka:9092
##      BOOTSTRAP_SERVERS: "host.docker.internal:9092"
#      GROUP_ID: 1  # Identify connectors of the same cluster
#      CONFIG_STORAGE_TOPIC: my_connect_configs
#      OFFSET_STORAGE_TOPIC: my_connect_offsets
#      STATUS_STORAGE_TOPIC: my_connect_statuses
#    depends_on:
#      - kafka
#      - mysql
volumes:
  kafka-data:
  mysql-data:
  elasticsearch-data:
