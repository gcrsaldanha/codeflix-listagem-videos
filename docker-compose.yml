x-elasticsearch-base: &elasticsearch-base
  image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
  environment:
    - discovery.type=single-node
    - xpack.security.enabled=false
    # - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    # - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    - "ES_JAVA_OPTS=-Xms128m -Xmx128m"
    - "indices.fielddata.cache.size=5%"
  # ulimits:
  #   memlock:
  #     soft: -1
  #     hard: -1
  healthcheck:
    test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
    interval: 30s
    timeout: 10s
    retries: 5

x-python-base: &python-base
  build: .
  environment:
    PYTHONPATH: "/app"
  volumes:
    - .:/app

services:
  kafka:
    container_name: kafka
    hostname: kafka
    image: apache/kafka:3.7.0
    ports:
      - "9092:9092"
    environment:
      PATH: /opt/kafka/bin:/$PATH
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    healthcheck:
      test: [ "CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - kafka-data:/var/lib/kafka

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: true
    volumes:
      - kui-data:/etc/kafkaui/


  mysql:
    container_name: mysql
    hostname: mysql
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: codeflix
      MYSQL_USER: codeflix
      MYSQL_PASSWORD: codeflix
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"

  fastapi:
    <<: *python-base
    container_name: fastapi
    hostname: fastapi
    environment:
      ELASTICSEARCH_HOST: "http://elasticsearch:9200"
      ENVIRONMENT: "${ENVIRONMENT:-development}"  # Default to development if not set
    ports:
      - "8000:8000"
    command: >
      sh -c '
      echo "Starting FastAPI in $$ENVIRONMENT environment";
      if [ "$$ENVIRONMENT" = "production" ]; then
        fastapi run src/infra/api/http/main.py --host 0.0.0.0 --port 8000;
      else
        fastapi dev src/infra/api/http/main.py --host 0.0.0.0 --port 8000 --reload;
      fi'
    depends_on:
      elasticsearch:
        condition: service_healthy

  consumer:
    <<: *python-base
    container_name: consumer
    hostname: consumer
    command: ["python", "src/infra/kafka/consumer.py"]
    environment:
      KAFKA_HOST: "kafka:19092"
      ELASTICSEARCH_HOST: "http://elasticsearch:9200"
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  elasticsearch:
    <<: *elasticsearch-base
    container_name: elasticsearch
    hostname: elasticsearch
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    container_name: kibana
    hostname: kibana
    image: docker.elastic.co/kibana/kibana:8.13.4
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: 'http://elasticsearch:9200'
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - dev

  connect:
    container_name: connect
    hostname: connect
    image: quay.io/debezium/connect:2.5
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:19092  # If connecting from host: 9092
      GROUP_ID: "connect-cluster"
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/connectors" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy

  connect-setup:
    container_name: connect-setup
    image: curlimages/curl
    volumes:
      - ./bin/connect-setup.sh:/connect-setup.sh
    depends_on:
      connect:
        condition: service_healthy
    command: ["sh", "-c", "/connect-setup.sh"]
    restart: "no"

  elasticsearch-test:
    <<: *elasticsearch-base
    container_name: elasticsearch-test
    hostname: elasticsearch-test
    ports:
      - "9201:9200"
    profiles:
      - dev

  unit-tests:
    <<: *python-base
    container_name: tests
    command: ["pytest", "-vv", "-s", "src/", "--ignore=src/tests_e2e/"]
    profiles:
      - dev
    ports:
      - "5678:5678"  # Debug port

  integration-tests:
    <<: *python-base
    container_name: integration-tests
    command: ["pytest", "-vv", "-s"]
    environment:
      ELASTICSEARCH_TEST_HOST: "http://elasticsearch-test:9200"
    depends_on:
      elasticsearch-test:
        condition: service_healthy
    profiles:
      - dev
    ports:
      - "5678:5678"  # Debug port

volumes:
  kafka-data:
  mysql-data:
  elasticsearch-data:
  kui-data:
